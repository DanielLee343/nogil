# This script generates the opcode2.h header file.

import sys
import tokenize

header = """
/* Auto-generated by Tools/scripts/generate_opcode_h.py from Lib/opcode.py */
#ifndef Py_OPCODE2_H
#define Py_OPCODE2_H
#ifdef __cplusplus
extern "C" {
#endif


    /* Instruction opcodes for compiled code */
""".lstrip()

footer = """

#ifdef __cplusplus
}
#endif
#endif /* !Py_OPCODE2_H */
"""


def main(opcode_py, outfile='Include/opcode2.h'):
    opcode = {}
    with tokenize.open(opcode_py) as fp:
        code = fp.read()
    exec(code, opcode)
    opcodes = opcode['opcodes']
    with open(outfile, 'w') as fobj:
        fobj.write(header)
        for bytecode in opcodes:
            if bytecode is not None:
                fobj.write("#define %-23s %3s\n" % (bytecode.name, bytecode.opcode))
        fobj.write(footer)

    print("%s regenerated from %s" % (outfile, opcode_py))


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2])
