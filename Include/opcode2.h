/* Auto-generated by Tools/scripts/generate_opcode_h.py from Lib/opcode.py */
#ifndef Py_OPCODE2_H
#define Py_OPCODE2_H
#ifdef __cplusplus
extern "C" {
#endif


// Instruction opcodes for compiled code
//    name                     opcode   size
#define OPCODE_LIST(_) \
    _(CLEAR_ACC,                 1,     2) \
    _(FUNC_HEADER,               2,     4) \
    _(METHOD_HEADER,             3,     2) \
    _(COROGEN_HEADER,            4,     2) \
    _(CFUNC_HEADER,              6,     2) \
    _(FUNC_TPCALL_HEADER,        7,     2) \
    _(NOP,                       9,     2) \
    _(UNARY_POSITIVE,           10,     2) \
    _(UNARY_NEGATIVE,           11,     2) \
    _(UNARY_NOT,                12,     2) \
    _(UNARY_NOT_FAST,           13,     2) \
    _(UNARY_INVERT,             15,     2) \
    _(BINARY_MATRIX_MULTIPLY,   16,     2) \
    _(INPLACE_MATRIX_MULTIPLY,  17,     2) \
    _(BINARY_POWER,             19,     2) \
    _(BINARY_MULTIPLY,          20,     2) \
    _(BINARY_MODULO,            22,     2) \
    _(BINARY_ADD,               23,     2) \
    _(BINARY_SUBTRACT,          24,     2) \
    _(BINARY_SUBSCR,            25,     2) \
    _(BINARY_FLOOR_DIVIDE,      26,     2) \
    _(BINARY_TRUE_DIVIDE,       27,     2) \
    _(INPLACE_FLOOR_DIVIDE,     28,     2) \
    _(INPLACE_TRUE_DIVIDE,      29,     2) \
    _(LOAD_EXC,                 30,     2) \
    _(LOAD_INTRINSIC,           34,     2) \
    _(CALL_INTRINSIC_1,         35,     2) \
    _(CALL_INTRINSIC_N,         36,     4) \
    _(WITH_EXCEPT_START,        49,     2) \
    _(GET_AITER,                50,     2) \
    _(GET_ANEXT,                51,     2) \
    _(END_ASYNC_WITH,           52,     2) \
    _(END_ASYNC_FOR,            54,     2) \
    _(INPLACE_ADD,              55,     2) \
    _(INPLACE_SUBTRACT,         56,     2) \
    _(INPLACE_MULTIPLY,         57,     2) \
    _(INPLACE_MODULO,           59,     2) \
    _(STORE_SUBSCR,             60,     4) \
    _(DELETE_SUBSCR,            61,     2) \
    _(BINARY_LSHIFT,            62,     2) \
    _(BINARY_RSHIFT,            63,     2) \
    _(BINARY_AND,               64,     2) \
    _(BINARY_XOR,               65,     2) \
    _(BINARY_OR,                66,     2) \
    _(INPLACE_POWER,            67,     2) \
    _(GET_ITER,                 68,     2) \
    _(GET_YIELD_FROM_ITER,      69,     2) \
    _(PRINT_EXPR,               70,     2) \
    _(LOAD_BUILD_CLASS,         71,     2) \
    _(YIELD_FROM,               72,     2) \
    _(GET_AWAITABLE,            73,     2) \
    _(LOAD_ASSERTION_ERROR,     74,     2) \
    _(INPLACE_LSHIFT,           75,     2) \
    _(INPLACE_RSHIFT,           76,     2) \
    _(INPLACE_AND,              77,     2) \
    _(INPLACE_XOR,              78,     2) \
    _(INPLACE_OR,               79,     2) \
    _(LIST_TO_TUPLE,            82,     2) \
    _(RETURN_VALUE,             83,     2) \
    _(IMPORT_STAR,              84,     2) \
    _(SETUP_ANNOTATIONS,        85,     2) \
    _(YIELD_VALUE,              86,     2) \
    _(POP_BLOCK,                87,     2) \
    _(END_EXCEPT,               89,     2) \
    _(STORE_NAME,               90,     2) \
    _(DELETE_NAME,              91,     2) \
    _(FOR_ITER,                 93,     4) \
    _(UNPACK,                   94,     2) \
    _(STORE_ATTR,               95,     4) \
    _(DELETE_ATTR,              96,     2) \
    _(STORE_GLOBAL,             97,     2) \
    _(DELETE_GLOBAL,            98,     2) \
    _(LOAD_CONST,              100,     2) \
    _(LOAD_NAME,               101,     2) \
    _(BUILD_TUPLE,             102,     4) \
    _(BUILD_LIST,              103,     4) \
    _(BUILD_SET,               104,     4) \
    _(BUILD_MAP,               105,     2) \
    _(LOAD_ATTR,               106,     4) \
    _(COMPARE_OP,              107,     4) \
    _(IMPORT_NAME,             108,     2) \
    _(IMPORT_FROM,             109,     4) \
    _(JUMP_IF_FALSE,           111,     4) \
    _(JUMP_IF_TRUE,            112,     4) \
    _(JUMP,                    113,     4) \
    _(POP_JUMP_IF_FALSE,       114,     4) \
    _(POP_JUMP_IF_TRUE,        115,     4) \
    _(LOAD_GLOBAL,             116,     4) \
    _(IS_OP,                   117,     2) \
    _(CONTAINS_OP,             118,     2) \
    _(JUMP_IF_NOT_EXC_MATCH,   121,     4) \
    _(END_FINALLY,             122,     2) \
    _(CALL_FINALLY,            123,     4) \
    _(LOAD_FAST,               124,     2) \
    _(STORE_FAST,              125,     2) \
    _(DELETE_FAST,             126,     2) \
    _(RAISE,                   130,     2) \
    _(CALL_FUNCTION,           131,     4) \
    _(MAKE_FUNCTION,           132,     2) \
    _(BUILD_SLICE,             133,     2) \
    _(LOAD_DEREF,              136,     2) \
    _(STORE_DEREF,             137,     2) \
    _(DELETE_DEREF,            138,     2) \
    _(CALL_FUNCTION_EX,        142,     2) \
    _(SETUP_WITH,              143,     2) \
    _(EXTENDED_ARG,            144,     2) \
    _(LIST_APPEND,             145,     2) \
    _(SET_ADD,                 146,     2) \
    _(MAP_ADD,                 147,     2) \
    _(LOAD_CLASSDEREF,         148,     4) \
    _(END_WITH,                150,     2) \
    _(SETUP_ASYNC_WITH,        154,     2) \
    _(BUILD_CONST_KEY_MAP,     156,     2) \
    _(LOAD_METHOD,             160,     4) \
    _(CALL_METHOD,             161,     4) \
    _(LIST_EXTEND,             162,     2) \
    _(SET_UPDATE,              163,     2) \
    _(DICT_MERGE,              164,     2) \
    _(DICT_UPDATE,             165,     2) \
    _(CLEAR_FAST,              168,     2) \
    _(COPY,                    169,     4) \
    _(MOVE,                    170,     4)


enum {
#define OPCODE_NAME(Name, Code, ...) Name = Code,
OPCODE_LIST(OPCODE_NAME)
#undef OPCODE_NAME
};

enum {
#define OPSIZE(Name, Code, Size) OP_SIZE_##Name = Size,
OPCODE_LIST(OPSIZE)
#undef OPSIZE
};

#ifdef __cplusplus
}
#endif
#endif /* !Py_OPCODE2_H */
