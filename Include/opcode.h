/* Auto-generated by Tools/scripts/generate_opcode_h.py from Lib/opcode.py */
#ifndef Py_OPCODE_H
#define Py_OPCODE_H
#ifdef __cplusplus
extern "C" {
#endif


// Instruction opcodes for compiled code
//    name                   opcode   size   wide_size
#define OPCODE_LIST(_) \
    _(CLEAR_ACC,                  1,     1,      2) \
    _(CLEAR_FAST,                 2,     2,      6) \
    _(ALIAS,                      3,     3,     10) \
    _(COPY,                       4,     3,     10) \
    _(MOVE,                       5,     3,     10) \
    _(FUNC_HEADER,                6,     2,      6) \
    _(METHOD_HEADER,              7,     1,      2) \
    _(CFUNC_HEADER,               8,     1,      2) \
    _(CFUNC_HEADER_NOARGS,        9,     1,      2) \
    _(CFUNC_HEADER_O,            10,     1,      2) \
    _(CMETHOD_NOARGS,            11,     1,      2) \
    _(CMETHOD_O,                 12,     1,      2) \
    _(FUNC_TPCALL_HEADER,        13,     1,      2) \
    _(UNARY_POSITIVE,            14,     1,      2) \
    _(UNARY_NEGATIVE,            15,     1,      2) \
    _(UNARY_NOT,                 16,     1,      2) \
    _(UNARY_NOT_FAST,            17,     1,      2) \
    _(UNARY_INVERT,              18,     1,      2) \
    _(BINARY_MATRIX_MULTIPLY,    19,     2,      6) \
    _(BINARY_POWER,              20,     2,      6) \
    _(BINARY_MULTIPLY,           21,     2,      6) \
    _(BINARY_MODULO,             22,     2,      6) \
    _(BINARY_ADD,                23,     2,      6) \
    _(BINARY_SUBTRACT,           24,     2,      6) \
    _(BINARY_SUBSCR,             25,     2,      6) \
    _(BINARY_FLOOR_DIVIDE,       26,     2,      6) \
    _(BINARY_TRUE_DIVIDE,        27,     2,      6) \
    _(BINARY_LSHIFT,             28,     2,      6) \
    _(BINARY_RSHIFT,             29,     2,      6) \
    _(BINARY_AND,                30,     2,      6) \
    _(BINARY_XOR,                31,     2,      6) \
    _(BINARY_OR,                 32,     2,      6) \
    _(IS_OP,                     33,     2,      6) \
    _(CONTAINS_OP,               34,     2,      6) \
    _(COMPARE_OP,                35,     3,     10) \
    _(INPLACE_FLOOR_DIVIDE,      36,     2,      6) \
    _(INPLACE_TRUE_DIVIDE,       37,     2,      6) \
    _(INPLACE_ADD,               38,     2,      6) \
    _(INPLACE_SUBTRACT,          39,     2,      6) \
    _(INPLACE_MULTIPLY,          40,     2,      6) \
    _(INPLACE_LSHIFT,            41,     2,      6) \
    _(INPLACE_RSHIFT,            42,     2,      6) \
    _(INPLACE_AND,               43,     2,      6) \
    _(INPLACE_XOR,               44,     2,      6) \
    _(INPLACE_OR,                45,     2,      6) \
    _(INPLACE_MODULO,            46,     2,      6) \
    _(INPLACE_MATRIX_MULTIPLY,   47,     2,      6) \
    _(INPLACE_POWER,             48,     2,      6) \
    _(LOAD_FAST,                 49,     2,      6) \
    _(LOAD_NAME,                 50,     3,     10) \
    _(LOAD_CONST,                51,     2,      6) \
    _(LOAD_ATTR,                 52,     4,     14) \
    _(LOAD_GLOBAL,               53,     3,     10) \
    _(LOAD_METHOD,               54,     4,     14) \
    _(LOAD_DEREF,                55,     2,      6) \
    _(LOAD_CLASSDEREF,           56,     3,     10) \
    _(STORE_FAST,                57,     2,      6) \
    _(STORE_NAME,                58,     2,      6) \
    _(STORE_ATTR,                59,     3,     10) \
    _(STORE_ATTR_REG,            60,     3,     10) \
    _(STORE_GLOBAL,              61,     2,      6) \
    _(STORE_SUBSCR,              62,     3,     10) \
    _(STORE_SUBSCR_REG,          63,     3,     10) \
    _(STORE_DEREF,               64,     2,      6) \
    _(DELETE_FAST,               65,     2,      6) \
    _(DELETE_NAME,               66,     2,      6) \
    _(DELETE_ATTR,               67,     2,      6) \
    _(DELETE_GLOBAL,             68,     2,      6) \
    _(DELETE_SUBSCR,             69,     2,      6) \
    _(DELETE_DEREF,              70,     2,      6) \
    _(CALL_FUNCTION,             71,     4,      8) \
    _(CALL_FUNCTION_EX,          72,     2,      6) \
    _(CALL_METHOD,               73,     4,      8) \
    _(CALL_INTRINSIC_1,          74,     2,      6) \
    _(CALL_INTRINSIC_N,          75,     4,     14) \
    _(RETURN_VALUE,              76,     1,      2) \
    _(RAISE,                     77,     1,      2) \
    _(YIELD_VALUE,               78,     1,      2) \
    _(YIELD_FROM,                79,     2,      6) \
    _(JUMP,                      80,     3,      6) \
    _(JUMP_IF_FALSE,             81,     3,      6) \
    _(JUMP_IF_TRUE,              82,     3,      6) \
    _(JUMP_IF_NOT_EXC_MATCH,     83,     4,     10) \
    _(POP_JUMP_IF_FALSE,         84,     3,      6) \
    _(POP_JUMP_IF_TRUE,          85,     3,      6) \
    _(GET_ITER,                  86,     2,      6) \
    _(GET_YIELD_FROM_ITER,       87,     2,      6) \
    _(FOR_ITER,                  88,     4,     10) \
    _(IMPORT_NAME,               89,     2,      6) \
    _(IMPORT_FROM,               90,     3,     10) \
    _(IMPORT_STAR,               91,     2,      6) \
    _(BUILD_SLICE,               92,     2,      6) \
    _(BUILD_TUPLE,               93,     3,     10) \
    _(BUILD_LIST,                94,     3,     10) \
    _(BUILD_SET,                 95,     3,     10) \
    _(BUILD_MAP,                 96,     2,      6) \
    _(END_EXCEPT,                97,     2,      6) \
    _(CALL_FINALLY,              98,     4,     10) \
    _(END_FINALLY,               99,     2,      6) \
    _(LOAD_BUILD_CLASS,         100,     1,      2) \
    _(GET_AWAITABLE,            101,     3,     10) \
    _(GET_AITER,                102,     2,      6) \
    _(GET_ANEXT,                103,     2,      6) \
    _(END_ASYNC_WITH,           104,     2,      6) \
    _(END_ASYNC_FOR,            105,     2,      6) \
    _(UNPACK,                   106,     4,     14) \
    _(MAKE_FUNCTION,            107,     2,      6) \
    _(SETUP_WITH,               108,     2,      6) \
    _(END_WITH,                 109,     2,      6) \
    _(SETUP_ASYNC_WITH,         110,     2,      6) \
    _(LIST_EXTEND,              111,     2,      6) \
    _(LIST_APPEND,              112,     2,      6) \
    _(SET_ADD,                  113,     2,      6) \
    _(SET_UPDATE,               114,     2,      6) \
    _(DICT_MERGE,               115,     2,      6) \
    _(DICT_UPDATE,              116,     2,      6) \
    _(SETUP_ANNOTATIONS,        117,     1,      2) \
    _(SET_FUNC_ANNOTATIONS,     118,     2,      6) \
    _(WIDE,                     119,     1,      2)

#define INTRINSIC_LIST(_) \
    _(PyObject_Str,                   1) \
    _(PyObject_Repr,                  2) \
    _(PyObject_ASCII,                 3) \
    _(vm_format_value,                4) \
    _(vm_format_value_spec,           5) \
    _(vm_build_string,                6) \
    _(PyList_AsTuple,                 7) \
    _(vm_raise_assertion_error,       8) \
    _(vm_exc_set_cause,               9) \
    _(vm_print,                      10) \
    _(_PyAsyncGenValueWrapperNew,    11)


enum {
#define OPCODE_NAME(Name, Code, ...) Name = Code,
OPCODE_LIST(OPCODE_NAME)
#undef OPCODE_NAME
};

enum {
#define OPSIZE(Name, Code, Size, ...) OP_SIZE_##Name = Size,
OPCODE_LIST(OPSIZE)
#undef OPSIZE
};

enum {
#define OPSIZE(Name, Code, Size, WideSize) OP_SIZE_WIDE_##Name = WideSize,
OPCODE_LIST(OPSIZE)
#undef OPSIZE
};

enum {
#define INTRINSIC_CODE(Name, Code) Intrinsic_##Name = Code,
INTRINSIC_LIST(INTRINSIC_CODE)
#undef INTRINSIC_CODE
};

#ifdef __cplusplus
}
#endif
#endif /* !Py_OPCODE_H */
